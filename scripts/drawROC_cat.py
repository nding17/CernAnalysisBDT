import ROOT
from ROOT import TTree, TFile, TH1F, TLegend, TCanvas, gStyle, gPad, TLatex
import numpy as np
from array import array

############################################################
# this script is to draw the ROC curves for tth vs QCD,    #
# as well as tth vs ttbar. It takes the output file        #
# from the one generated by evalBDT.py as an input file    #
# It will draw the ROC curves in different categories      #
# as well. The method is similar to that in drawBDT_cat.py #
############################################################ 

# set up directory path and files' name
dir_ = "/shome/nding/CMSSW_8_0_11/src/task2"

samples_ = [  'tth', 'ttbar', 'qcd3', 'qcd5', 'qcd7', 'qcd10', 'qcd15', 'qcd20' ]

f_in_ = { }
for sam in samples_ :
    f_in_[ sam ] = TFile.Open( dir_ + "/backup/all_new_inputs_update_BDT_" + 
                               sam + ".root", "READ"  )

bdt_qcds_train = {} 

for sam in samples_ :
    bdt_qcds_train[ sam ] = array( 'd', [ 0 ] ) 

bdt_ = {}
njets_ = {}
nbjets_ = {}
tr_ = {}

for sam in samples_ :
    bdt_[ sam ] = array( 'd', [0] )
    njets_[ sam ] = array( 'i', [0] )
    nbjets_[ sam ] = array( 'i', [0] )

    tr_[ sam ] = f_in_[ sam ].Get( "tree" ) 
    tr_[ sam ].SetBranchAddress( "BDT_tth_vs_qcds", bdt_[ sam ] )
    tr_[ sam ].SetBranchAddress( "njets", njets_[ sam ] )
    tr_[ sam ].SetBranchAddress( "nBCSVM", nbjets_[ sam ] )

sclfac_ = { "tth" : 0.5085*0.577 / 3413232.0, 
            "qcd3" : 351300.0 / 38222596.0, 
	    "qcd5" : 31630.0 / 56596792.0, 
            "qcd7" : 6802.0 / 41236680.0, 
	    "qcd10" : 1206.0 / 10024439.0, 
            "qcd15" : 120.4 / 7479181.0, 
	    "qcd20" : 25.25 / 3951574.0, 
            "ttbar" : 831.76 / 76610800.0 }

ylds_ = { 'tth' : [], 'ttbar' : [], 'qcds' : [] }
cat_ = [ '7j3b', '7j4b', '8j3b', '8j4b', '9j3b', '9j4b' ]
ylds_cat_ = {}

for c in cat_:
    ylds_cat_[ c ] = { 'tth' : [], 'ttbar' : [], 'qcds' : [] } 

cuts = []
for i in range( 21 ):
    cuts.append( i * 0.1 + ( -1.0 ) )

for c in cuts:

    total_ = { 'tth' : 0.0, 'ttbar' : 0.0, 'qcds' : 0.0 }
    total_cat_ = {}

    for ct in cat_:
        total_cat_[ ct ] = { 'tth' : 0.0, 'ttbar' : 0.0, 'qcds' : 0.0 }

    for sam in samples_:
        for i in range( tr_[ sam ].GetEntries() ):
            # if i > 3000: break
            tr_[ sam ].GetEntry( i )
            if bdt_[ sam ][ 0 ] >= c:
                if 'q' in sam:
                    total_[ 'qcds' ] = total_[ 'qcds' ] + sclfac_[ sam ]
                else:
                    total_[ sam ] = total_[ sam ] + sclfac_[ sam ]
        
                for ct in cat_:
                    if njets_[ sam ][ 0 ] == int( ct[:1] ):
                        if int( ct[2:3] ) == 3 and nbjets_[ sam ][ 0 ] == int( ct[2:3] ):
                            if 'q' in sam:
                                total_cat_[ ct ][ 'qcds' ] = total_cat_[ ct ][ 'qcds' ] + sclfac_[ sam ]
                            else:
                                total_cat_[ ct ][ sam ] = total_cat_[ ct ][ sam ] + sclfac_[ sam ]
                        if int( ct[2:3] ) == 4 and nbjets_[ sam ][ 0 ] >= int( ct[2:3] ):
                            if 'q' in sam:
                                total_cat_[ ct ][ 'qcds' ] = total_cat_[ ct ][ 'qcds' ] + sclfac_[ sam ]
                            else:
                                total_cat_[ ct ][ sam ] = total_cat_[ ct ][ sam ] + sclfac_[ sam ] 
             
    print ">= " + str( c )
    print "tth ttl ylds: " +  str( total_[ 'tth' ] )
    print "ttbar ttl ylds: " + str( total_[ 'ttbar' ] )
    print "qcds ttl ylds: " + str( total_[ 'qcds' ] )
    print '\n'
    ylds_[ 'tth' ].append( total_[ 'tth' ] )
    ylds_[ 'ttbar' ].append( total_[ 'ttbar' ] )
    ylds_[ 'qcds' ].append( total_[ 'qcds' ] )

    for ct in cat_:
        ylds_cat_[ ct ][ 'tth' ].append( total_cat_[ ct ][ 'tth' ] )
        ylds_cat_[ ct ][ 'ttbar' ].append( total_cat_[ ct ][ 'ttbar' ] )
        ylds_cat_[ ct ][ 'qcds' ].append( total_cat_[ ct ][ 'qcds' ] )

tth_eff_ = array( 'd', [] )
ttbar_eff_ = array( 'd', [] )
qcds_eff_ = array( 'd', [] )

tth_eff_cat_ = {}
ttbar_eff_cat_ = {}
qcds_eff_cat_ = {}

for ct in cat_:
    tth_eff_cat_[ ct ] = array( 'd', [] )
    ttbar_eff_cat_[ ct ] = array( 'd', [] )
    qcds_eff_cat_[ ct ] = array( 'd', [] )

for nct in range( len( cuts ) ) :
    tth_eff_.append( ylds_[ 'tth' ][ nct ] / ylds_[ 'tth' ][ 0 ] )
    ttbar_eff_.append( ylds_[ 'ttbar' ][ nct ] / ylds_[ 'ttbar' ][ 0 ] )
    qcds_eff_.append( ylds_[ 'qcds' ][ nct ] / ylds_[ 'qcds' ][ 0 ] )

    for ct in cat_:
        tth_eff_cat_[ ct ].append( ylds_cat_[ ct ][ 'tth' ][ nct ] / 
                                   ylds_cat_[ ct ][ 'tth' ][ 0 ] )
        ttbar_eff_cat_[ ct ].append( ylds_cat_[ ct ][ 'ttbar' ][ nct ] /
                                     ylds_cat_[ ct ][ 'ttbar' ][ 0 ] )
        qcds_eff_cat_[ ct ].append( ylds_cat_[ ct ][ 'qcds' ][ nct ] / 
                                    ylds_cat_[ ct ][ 'qcds' ][ 0 ] )
        
# all of the styling attributes of the ROC curves
color_ = { "tthvsttbar" : ROOT.kRed, "tthvsqcds" : ROOT.kGreen + 1 }
roc_nickname = { "tthvsttbar" : "eff. : ttH vs t#bar{t} ", "tthvsqcds" :  "eff. : ttH vs QCD " }

roc_baseline = ROOT.TMultiGraph() # ROC curves without doing any combinations
leg_baseline = TLegend( 0.13, 0.88, 0.47, 0.77 )

rocs_all_ = [ roc_baseline ]
legs_all_ = [ leg_baseline ]

for i in range( len( cat_ ) ):
    rocs_all_.append( ROOT.TMultiGraph() )
    legs_all_.append( TLegend( 0.13, 0.88, 0.47, 0.77 ) )

roc_tth_vs_ttbar = ROOT.TGraph( len( tth_eff_ ), tth_eff_, ttbar_eff_ )
roc_tth_vs_qcds = ROOT.TGraph( len( tth_eff_ ), tth_eff_, qcds_eff_ )

roc_ = { "tthvsttbar" : roc_tth_vs_ttbar, 'tthvsqcds' : roc_tth_vs_qcds }

roc_cat_ = {}

for ct in cat_:
    roc_tth_vs_ttbar_ct = ROOT.TGraph( len( tth_eff_cat_[ ct ] ), tth_eff_cat_[ ct ],
                                       ttbar_eff_cat_[ ct ] )
    roc_tth_vs_qcds_ct = ROOT.TGraph( len( tth_eff_cat_[ ct ] ), tth_eff_cat_[ ct ],
                                      qcds_eff_cat_[ ct ] )

    roc_cat_[ ct ] = { "tthvsttbar" : roc_tth_vs_ttbar_ct,
                       "tthvsqcds" : roc_tth_vs_qcds_ct }

options_ = [ "tthvsttbar", "tthvsqcds" ]

style_ = { '7j3b' : 2, '7j4b' : 3, '8j3b' : 4, '8j4b' : 5,
              '9j3b' : 6, '9j4b' : 4 }
cat_nick = { '7j3b' : '7j, 3b', '7j4b' : '7j, #geq4b',
             '8j3b' : '8j, 3b', '8j4b' : '8j, #geq4b',
             '9j3b' : '9j, 3b', '9j4b' : '9j, #geq4b' }

for opt in options_ :
    roc_[ opt ].SetLineColor( color_[ opt ] )
    roc_[ opt ].SetLineWidth( 1 )
    roc_[ opt ].SetLineStyle( 2 )
    roc_[ opt ].SetFillStyle( 0 )

    leg_baseline.AddEntry( roc_[ opt ], roc_nickname[ opt ] )

    for ct in cat_:
        roc_cat_[ ct ][ opt ].SetLineColor( color_[ opt ] )
        roc_cat_[ ct ][ opt ].SetLineWidth( 2 )
        roc_cat_[ ct ][ opt ].SetLineStyle( 1 )
        roc_cat_[ ct ][ opt ].SetFillStyle( 0 )

    for i in range( len( rocs_all_ ) - 1 ):
        rocs_all_[ i+1 ].Add( roc_cat_[ cat_[i] ][ opt ] )
        legs_all_[ i+1 ].AddEntry( roc_cat_[ cat_[i] ][ opt ], 
                                   roc_nickname[ opt ])

ref_pts = array( 'd', [ 0.0, 1.0 ] )
ref = ROOT.TGraph( 2, ref_pts, ref_pts ) # draw a diagonal line for reference
ref.SetLineColor( ROOT.kBlack )
ref.SetLineWidth( 1 )

cs_ = []

x = 0.35
y = 0.65
latex_ = [ TLatex( x, y, "" ) ]

for i in range( len( cat_ ) ):
    latex_.append( TLatex( x, y, cat_nick[ cat_[ i ] ] ) )

for i in range( len( rocs_all_ ) ):
    cs_.append( TCanvas( "c" + str(i+1), "c" + str(i+1) ) )
    cs_[ i ].cd()
    rocs_all_[ i ].Add( ref )
    
    for opt in options_:
        rocs_all_[ i ].Add( roc_[ opt ] )

    rocs_all_[ i ].Draw( 'ACP' )
    rocs_all_[ i ].SetTitle( "ROC Curve for BDT Evaluation" )
    rocs_all_[ i ].GetXaxis().SetTitle( "Signal Efficiency" )
    rocs_all_[ i ].GetYaxis().SetTitle( "Background Efficiency" )
    legs_all_[ i ].Draw( "same" )
    latex_[ i ].Draw( "same" )

    gPad.Modified()
    rocs_all_[ i ].GetXaxis().SetLimits( 0.0, 1.0 )
    rocs_all_[ i ].SetMinimum( 0.0 )
    rocs_all_[ i ].SetMaximum( 1.0 )

    cs_[ i ].Update()
    cs_[ i ].SaveAs( dir_ + "/dist/EVERYTHING/ROC_new_vars_update_cat_b_" + str(i) + ".pdf" )
    cs_[ i ].SaveAs( dir_ + "/dist/EVERYTHING/ROC_new_vars_update_cat_b_" + str(i) + ".png" )
    
raw_input( "<<<waiting" )
